var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [CBFs]","category":"page"},{"location":"reference/#CBFs.cbf_qp-Union{Tuple{R}, Tuple{Any, Any, Any, Any, R}} where R<:Real","page":"Reference","title":"CBFs.cbf_qp","text":"u = cbf_qp(u0, h, Lfh, Lgh, α; P=I)\n\nReturns the CBF QP control input, i.e. the result of\n\nbeginaligned\nu = min_u in mathbbR^m quad  quad frac12 (u - u_0)^T P (u - u_0)\nquad quad st quad  quad L_fh + L_gh u leq - alpha(h)\nendaligned\n\nIf α<:Real, we assume α(r) = α r\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CBFs","category":"page"},{"location":"#CBFs.jl","page":"Home","title":"CBFs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CBFs.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple example of a double integrator trying to not hit a wall that is at x_1 = 20, where the control input is the acceleration. Since I'm lazy, I've used ForwardDiff.jl to get the gradient of the barrier function.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LinearAlgebra, ForwardDiff\nusing CBFs\n  \n## Define control-affine dynamics\nf(x) = [x[2], 0]              # should be a vector\ng(x) = [[1.;;], [0.;;]        # should be a matrix (here, 2x1 matrix)\n\n## Define the barrier function\nh(x) = -x[2] + (2.0 - x[1])\n\n# construct Lie derivatives Lfh, Lgh\ndhdx(x) = ForwardDiff.gradient(h, x)\nLfh(x) = dhdx(x)' * f(x)\nLgh(x) = dhdx(x)' * g(x)\n\n## define the class-K function\n# α(r) = 1.0 * r^2            # define a function\nα = 1.0                       # or simply define the constant of a linear class-K function\n\n\n# desired control input\nu0 = [1.0]                    # should be a vector \n\n# state:\nx = [1.0, 0.8]\n  \n# solve for a safe control input:\nu_cbf = cbf_qp(u0, h(x), Lfh(x), Lgh(x), α)\n\n# you should get\n## u_cbf ≈ [-0.6]","category":"page"}]
}
